<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_Description" xml:space="preserve">
    <value>Descrption</value>
  </data>
  <data name="Common_IsPublic" xml:space="preserve">
    <value>Is Public</value>
  </data>
  <data name="Common_Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Common_Key_Help" xml:space="preserve">
    <value>The key is used to identify this item in scripts and must be unique with respect to it's parent. One a key has been assigned, it can not be changed.</value>
  </data>
  <data name="Common_Key_Validation" xml:space="preserve">
    <value>The key must use only letters and numbers, and must be lowercase and must be between 3 and 20 characters.</value>
  </data>
  <data name="Common_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Common_Script" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="Connection_Select_Type" xml:space="preserve">
    <value>-select connection type-</value>
  </data>
  <data name="Connection_Type_AMQP" xml:space="preserve">
    <value>AMQP</value>
  </data>
  <data name="Connection_Type_AzureEventHub" xml:space="preserve">
    <value>Azure Event Hub</value>
  </data>
  <data name="Connection_Type_AzureIoTHub" xml:space="preserve">
    <value>Azure IoT Hub</value>
  </data>
  <data name="Connection_Type_AzureServiceBus" xml:space="preserve">
    <value>Azure Service Bus</value>
  </data>
  <data name="Connection_Type_Custom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="Connection_Type_MQTT" xml:space="preserve">
    <value>MQTT</value>
  </data>
  <data name="Connection_Type_Rest" xml:space="preserve">
    <value>REST</value>
  </data>
  <data name="Connection_Type_Soap" xml:space="preserve">
    <value>SOAP</value>
  </data>
  <data name="Connection_Type_TCP" xml:space="preserve">
    <value>TCP</value>
  </data>
  <data name="Connection_Type_UDP" xml:space="preserve">
    <value>UDP</value>
  </data>
  <data name="MessageHeader_Description" xml:space="preserve">
    <value>The Message Header is used to add Key Value pairs to the Message Packet that suplement the values sent in the payload</value>
  </data>
  <data name="MessageHeader_Help" xml:space="preserve">
    <value>The Message Header is used to add Key Value pairs to the Message Packet that suplement the values sent in the payload</value>
  </data>
  <data name="MessageHeader_Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="MessageHeader_Key_Help" xml:space="preserve">
    <value>This will be the exact token sent to identify the header value</value>
  </data>
  <data name="MessageHeader_Title" xml:space="preserve">
    <value>Message Header</value>
  </data>
  <data name="MessageHeader_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="MessageHeader_Value_Help" xml:space="preserve">
    <value>This wil be the value that is assigned to the header.  You can use the tokens {epoch} {deviceid} {jsonutcdate} to have these populated at run time</value>
  </data>
  <data name="MessageTemplate_BinaryPayload" xml:space="preserve">
    <value>Binary Payload</value>
  </data>
  <data name="MessageTemplate_Description" xml:space="preserve">
    <value>A Message Tempmlate is used to contain the payload which consist of a string or binary characters that can be used by the simulators to help troubleshoot your Deployments, Device Configurations and Pipeline Module Configurations</value>
  </data>
  <data name="MessageTemplate_Help" xml:space="preserve">
    <value>A Message Tempmlate is used to contain the payload which consist of a string or binary characters that can be used by the simulators to help troubleshoot your Deployments, Device Configurations and Pipeline Module Configurations</value>
  </data>
  <data name="MessageTemplate_TextPayload" xml:space="preserve">
    <value>Text Payload</value>
  </data>
  <data name="MessageTemplate_Title" xml:space="preserve">
    <value>Message Template</value>
  </data>
  <data name="Message_MessageHeaders" xml:space="preserve">
    <value>Message Headers</value>
  </data>
  <data name="Message_MessageTokens" xml:space="preserve">
    <value>Message Tokens</value>
  </data>
  <data name="Message_MessageToken_Help" xml:space="preserve">
    <value>You can define a set of tokens that will be used to replace content within your message at runtime.  When running your simulator, you will be prompted for these values prior to sending your message.</value>
  </data>
  <data name="Message_PayloadType" xml:space="preserve">
    <value>Payload Type</value>
  </data>
  <data name="Message_PayloadType_Binary" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Message_PayloadType_Help" xml:space="preserve">
    <value>You can send either a Text or Binary payload along with your message.  A Text payload might be a CSV or Tab delimited string or plain text.  A Binary payload will contain a set of bytes.</value>
  </data>
  <data name="Message_PayloadType_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Message_SelectPayloadType" xml:space="preserve">
    <value>-select payload type-</value>
  </data>
  <data name="Simulator_Deployment_Config" xml:space="preserve">
    <value>Deployment Config</value>
  </data>
  <data name="Simulator_Description" xml:space="preserve">
    <value>A Simulator is used to simulate a real world device to help develop and troubleshoot your Deployments, Device Configurations and Pipeline Configurations</value>
  </data>
  <data name="Simulator_Device_Config" xml:space="preserve">
    <value>Device Config</value>
  </data>
  <data name="Simulator_Help" xml:space="preserve">
    <value>A Simulator is used to simulate a real world device to help develop and troubleshoot your Deployments, Device Configurations and Pipeline Configurations</value>
  </data>
  <data name="Simulator_MessageTemplates" xml:space="preserve">
    <value>Message Templates</value>
  </data>
  <data name="Simulator_PipelineModule_Config" xml:space="preserve">
    <value>Pipeline Module Config</value>
  </data>
  <data name="Simulator_Title" xml:space="preserve">
    <value>Simulator</value>
  </data>
  <data name="MessageDynamicAttribute_DefaultValue" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="MessageDynamicAttribute_Description" xml:space="preserve">
    <value>When you create your message templates to send to the server you can specify values that can be modified for each message that is sent.</value>
  </data>
  <data name="MessageDynamicAttribute_Help" xml:space="preserve">
    <value>When you create your message templates to send to the server you can specify values that can be modified for each message that is sent.</value>
  </data>
  <data name="MessageDynamicAttribute_ParameterType" xml:space="preserve">
    <value>Parameter Type</value>
  </data>
  <data name="MessageDynamicAttribute_Title" xml:space="preserve">
    <value>Dynamic Attribute</value>
  </data>
  <data name="Message_PathAndQueryString" xml:space="preserve">
    <value>Path and Query String</value>
  </data>
  <data name="Simulator_DeviceType" xml:space="preserve">
    <value>Device Type</value>
  </data>
  <data name="MessageTemplate_EndPoint" xml:space="preserve">
    <value>End Point</value>
  </data>
  <data name="MessageTemplate_Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="MessageTemplate_Transport" xml:space="preserve">
    <value>Transport</value>
  </data>
  <data name="Simulator_DefaultEndPoint" xml:space="preserve">
    <value>Default End Point</value>
  </data>
  <data name="Simulator_DefaultPort" xml:space="preserve">
    <value>Default Port</value>
  </data>
  <data name="Simulator_DefaultTransport" xml:space="preserve">
    <value>Transport</value>
  </data>
  <data name="Transport_AMQP" xml:space="preserve">
    <value>AMQP</value>
  </data>
  <data name="Transport_MQTT" xml:space="preserve">
    <value>MQTT</value>
  </data>
  <data name="Transport_REST_Http" xml:space="preserve">
    <value>REST (http)</value>
  </data>
  <data name="Transport_REST_Https" xml:space="preserve">
    <value>REST (https)</value>
  </data>
  <data name="Transport_SelectTransportType" xml:space="preserve">
    <value>-select transport type-</value>
  </data>
  <data name="Transport_TCP" xml:space="preserve">
    <value>TCP</value>
  </data>
  <data name="Transport_UDP" xml:space="preserve">
    <value>UDP</value>
  </data>
  <data name="MessageTemplate_DynamicAttributes" xml:space="preserve">
    <value>Dynamic Attributes</value>
  </data>
  <data name="Simulator_AccessKey" xml:space="preserve">
    <value>Access Key</value>
  </data>
  <data name="Simulator_DeviceId" xml:space="preserve">
    <value>Device Id</value>
  </data>
  <data name="Simulator_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Simulator_UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="Common_None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="HttpVerb_DELETE" xml:space="preserve">
    <value>DELETE</value>
  </data>
  <data name="HttpVerb_GET" xml:space="preserve">
    <value>GET</value>
  </data>
  <data name="HttpVerb_POST" xml:space="preserve">
    <value>POST</value>
  </data>
  <data name="HttpVerb_PUT" xml:space="preserve">
    <value>PUT</value>
  </data>
  <data name="MessageTemplate_HttpVerb" xml:space="preserve">
    <value>HTTP Verb</value>
  </data>
  <data name="MessageTemplate_HttpVerb_Select" xml:space="preserve">
    <value>-select http verb-</value>
  </data>
  <data name="MessageHeader_HeaderName" xml:space="preserve">
    <value>Header Name</value>
  </data>
  <data name="MessageHeader_HeaderName_Help" xml:space="preserve">
    <value>Enter the name of the header that will be put into the messages header collection.  An example of this would be Content-type</value>
  </data>
  <data name="MessageTemplate_Topic" xml:space="preserve">
    <value>Topic</value>
  </data>
  <data name="Simulator_DefaultPayloadType" xml:space="preserve">
    <value>Default Payload Type</value>
  </data>
  <data name="Transport_AzureIoTHub" xml:space="preserve">
    <value>Azure IoT Hub</value>
  </data>
  <data name="MessageTemplate_AppendCR" xml:space="preserve">
    <value>Append CR (0x0D)</value>
  </data>
  <data name="MessageTemplate_AppendLF" xml:space="preserve">
    <value>Append LF (0x0A)</value>
  </data>
  <data name="Transport_AzureEventHub" xml:space="preserve">
    <value>Azure Event Hub</value>
  </data>
  <data name="Transport_AzureServiceBus" xml:space="preserve">
    <value>Azure Service Bus</value>
  </data>
  <data name="Simulator_ConnectionString" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="Simulator_HubName" xml:space="preserve">
    <value>Hub Name</value>
  </data>
  <data name="Simulator_AccessKeyName" xml:space="preserve">
    <value>Access Key Name</value>
  </data>
  <data name="Simulator_Subscription" xml:space="preserve">
    <value>Subscription</value>
  </data>
  <data name="Simulator_Subscription_Help" xml:space="preserve">
    <value>If your messaging protocol allows for receving messages based on a subscription, you can add a subscription to receive cloud to devices messages.  If necessary you can use the device id in the topic such as /device/messages/{deviceid}.</value>
  </data>
  <data name="Simulator_TLSSSL" xml:space="preserve">
    <value>Use TLS/SSL</value>
  </data>
  <data name="Simulator_QueueName" xml:space="preserve">
    <value>Queue Name</value>
  </data>
  <data name="Simulator_Topic" xml:space="preserve">
    <value>Topic</value>
  </data>
  <data name="Transport_RabbitMQ" xml:space="preserve">
    <value>Rabbit MQ</value>
  </data>
  <data name="MessageTemplate_MessageId" xml:space="preserve">
    <value>MessageId</value>
  </data>
  <data name="MessageTemplate_Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="MessageTemplate_QOS0" xml:space="preserve">
    <value>QOS0</value>
  </data>
  <data name="MessageTemplate_QOS1" xml:space="preserve">
    <value>QOS1</value>
  </data>
  <data name="MessageTemplate_QOS2" xml:space="preserve">
    <value>QOS2</value>
  </data>
  <data name="MessageTemplate_QOSLevel" xml:space="preserve">
    <value>QOS Level</value>
  </data>
  <data name="MessageTemplate_QOS_Select" xml:space="preserve">
    <value>-select qos level-</value>
  </data>
  <data name="MessageTemplate_RetainFlag" xml:space="preserve">
    <value>Retain Flag</value>
  </data>
  <data name="MessageTemplate_To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="MessageTemplate_ContentType" xml:space="preserve">
    <value>Content Type</value>
  </data>
  <data name="Simulator_AnonymousConnection" xml:space="preserve">
    <value>Anonymous Connection</value>
  </data>
  <data name="Simulator_BasicAuth" xml:space="preserve">
    <value>Use  Basic Auth</value>
  </data>
  <data name="Simulator_CredentialsStorage" xml:space="preserve">
    <value>Credentials Storage</value>
  </data>
  <data name="Simulator_CredentialsStorage_Help" xml:space="preserve">
    <value>Select where you would like to store your credentials to connect to your server resource.   You can select to store them in the cloud, store them locally on your device or prompt for credentials each time you start the simulator.</value>
  </data>
  <data name="Simulator_CredentialsStorage_InCloud" xml:space="preserve">
    <value>In Cloud</value>
  </data>
  <data name="Simulator_CredentialsStorage_OnDevice" xml:space="preserve">
    <value>On Device</value>
  </data>
  <data name="Simulator_CredentialsStorage_Prompt" xml:space="preserve">
    <value>Prompt</value>
  </data>
  <data name="Simulator_CredentialsStorage_Select" xml:space="preserve">
    <value>-select credentials storage location-</value>
  </data>
  <data name="Message_PayloadType_GeoPath" xml:space="preserve">
    <value>Geo Path</value>
  </data>
  <data name="MessageTemplate_GeoPoints" xml:space="preserve">
    <value>Geo Points</value>
  </data>
  <data name="SimulatorNetwork_Description" xml:space="preserve">
    <value>A Simulator Network is a collection of simulators that can be instantiated and send messages at specific intervals</value>
  </data>
  <data name="SimulatorNetwork_Help" xml:space="preserve">
    <value>A Simulator Network is a collection of simulators that can be instantiated and send messages at specific intervals</value>
  </data>
  <data name="SimulatorNetwork_Simulators" xml:space="preserve">
    <value>Simulators</value>
  </data>
  <data name="SimulatorNetwork_Title" xml:space="preserve">
    <value>Simulator Network</value>
  </data>
  <data name="MessageTransmissionPlan_Description" xml:space="preserve">
    <value>A plan for how a simulator instance should send messages</value>
  </data>
  <data name="MessageTransmissionPlan_Help" xml:space="preserve">
    <value>A plan for how a simulator instance should send messages</value>
  </data>
  <data name="MessageTransmissionPlan_MessageTemplate" xml:space="preserve">
    <value>Message Template</value>
  </data>
  <data name="MessageTransmissionPlan_PeriodMS" xml:space="preserve">
    <value>Period (ms)</value>
  </data>
  <data name="MessageTransmissionPlan_Title" xml:space="preserve">
    <value>Message Transmission Plan</value>
  </data>
  <data name="MessageTransmissionPlan_Values" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="SimulatorInstance_Description" xml:space="preserve">
    <value>An instance of a simulator that should be part of a simulator network</value>
  </data>
  <data name="SimulatorInstance_DeviceId" xml:space="preserve">
    <value>Device Id</value>
  </data>
  <data name="SimulatorInstance_Help" xml:space="preserve">
    <value>An instance of a simulator that should be part of a simulator network</value>
  </data>
  <data name="SimulatorInstance_Simulator" xml:space="preserve">
    <value>Simulator</value>
  </data>
  <data name="SimulatorInstance_Title" xml:space="preserve">
    <value>Simulator Instance</value>
  </data>
  <data name="SimulatorInstance_TransmissionPlan" xml:space="preserve">
    <value>Transmission Plan</value>
  </data>
  <data name="MessageValue_Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="MessageValue_Description" xml:space="preserve">
    <value>A message value is a customized value that your simulator instance will send with this transmission plan</value>
  </data>
  <data name="MessageValue_Help" xml:space="preserve">
    <value>A message value is a customized value that your simulator instance will send with this transmission plan</value>
  </data>
  <data name="MessageValue_Title" xml:space="preserve">
    <value>Message Value</value>
  </data>
  <data name="MessageValue_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="MessageTransmissionPlan_SelectMessage" xml:space="preserve">
    <value>-select message-</value>
  </data>
  <data name="MessageValue_SelectAttribute" xml:space="preserve">
    <value>-select attribute-</value>
  </data>
  <data name="SimulatorInstance_SelectSimulator" xml:space="preserve">
    <value>-select simulator-</value>
  </data>
  <data name="Simulator_AuthHeader" xml:space="preserve">
    <value>Authorization Header</value>
  </data>
  <data name="Simulator_AuthHeader_Help" xml:space="preserve">
    <value>Please provide an authorization header to be included in the Http Headers</value>
  </data>
  <data name="SimulatorNetwork_AccessKey1" xml:space="preserve">
    <value>Access Key Primary</value>
  </data>
  <data name="SimulatorNetwork_AccessKey_Help" xml:space="preserve">
    <value>The access key can be used by remote runtime to download the full configuration of a simulator network.</value>
  </data>
  <data name="SimulatorNetwork_AccessKey2" xml:space="preserve">
    <value>Access Key Secondary</value>
  </data>
  <data name="SimulatorState_Description" xml:space="preserve">
    <value>You can add different states to your simulator these can then be used to send out different error conditions or message values.</value>
  </data>
  <data name="SimulatorState_Help" xml:space="preserve">
    <value>You can add different states to your simulator these can then be used to send out different error conditions or message values.</value>
  </data>
  <data name="SimulatorState_Title" xml:space="preserve">
    <value>Simulator State</value>
  </data>
  <data name="Simulator_SimulatorStates" xml:space="preserve">
    <value>Simulator States</value>
  </data>
  <data name="MessageTransmissionPlan_ForState" xml:space="preserve">
    <value>For State</value>
  </data>
  <data name="MessageTransmissionPlan_ForState_Select" xml:space="preserve">
    <value>-select state-</value>
  </data>
  <data name="Message_PayloadType_PointArray" xml:space="preserve">
    <value>Point Array</value>
  </data>
  <data name="Simulator_DeploymentConfiguration_Watermark" xml:space="preserve">
    <value>-select deployment configuration-</value>
  </data>
  <data name="Simulator_DeviceType_Watermark" xml:space="preserve">
    <value>-select device type-</value>
  </data>
  <data name="Simulator_Device_Config_Watermark" xml:space="preserve">
    <value>-select device configuration-</value>
  </data>
</root>